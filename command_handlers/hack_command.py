import random
import config
import asyncio
from on_start import apps

from pyrogram import filters
from pyrogram.client import Client
from pyrogram.errors import FloodWait
from pyrogram.handlers import MessageHandler
from pyrogram.types.messages_and_media.message import Message


HELP_VAR = {
    "ru": {
        ".hack": "<code>.hack</code>  ‚Äî  –∫–æ–º–∞–Ω–¥–∞ \"–≤–∑–ª–æ–º–∞\" –ø–µ–Ω—Ç–∞–≥–æ–Ω–∞\n"+
                "==============================\n<u>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã</u>:\n    ~~–ù–µ –∏–º–µ–µ—Ç~~"
    },
    "en": {
        ".hack": "<code>.hack</code>  ‚Äî  command to \"hack\" pentagon\n"+
                "==============================\n<u>Params</u>:\n    ~~Doesn't have~~"
    }
}


PHRASES_VAR = {
    "ru": {
        "hack_in_process": "üëÆ‚Äç –í–∑–ª–æ–º –ø–µ–Ω—Ç–∞–≥–æ–Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ...",
        "successfully_hacked": "üü¢ –ü–µ–Ω—Ç–∞–≥–æ–Ω —É—Å–ø–µ—à–Ω–æ –≤–∑–ª–æ–º–∞–Ω!",
        "find_in_process": "üëΩ –ü–æ–∏—Å–∫ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –ù–õ–û ...",
        "successfully_finded": "ü¶ñ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ –Ω–∞ –∑–µ–º–ª–µ!"
    },
    "en": {
        "hack_in_process": "üëÆ‚Äç Hacking pentagon in process ...",
        "successfully_hacked": "üü¢ Pentagon successfully hacked!",
        "find_in_process": "üëΩ Finding secret info about UFO ...",
        "successfully_finded": "ü¶ñ Finded info about the existence of dinosaurs on earth!"
    }
}


def get_phrase(key: str):
    return PHRASES_VAR.get(config.PHRASES_LANGUAGE, PHRASES_VAR.get("en", {}))[key]


async def hack_command_func(cl: Client, msg: Message):
    perc = 0

    while(perc < 100):
        if config.IS_STOP:
            return
        
        try:
            text = get_phrase("hack_in_process") + str(perc) + "%"
            await msg.edit(text)

            perc += random.randint(1, 3)
            await asyncio.sleep(0.1)

        except FloodWait as e:
            await asyncio.sleep(e.value)

    await msg.edit(get_phrase("successfully_hacked"))
    await asyncio.sleep(3)

    await msg.edit(get_phrase("find_in_process"))
    perc = 0

    while(perc < 100):
        if config.IS_STOP:
            return
        
        try:
            text = get_phrase("find_in_process") + str(perc) + "%"
            await msg.edit(text)

            perc += random.randint(1, 5)
            await asyncio.sleep(0.15)

        except FloodWait as e:
            await asyncio.sleep(e.value)

    await msg.edit(get_phrase("successfully_finded"))


for a in apps:
    a.add_handler(MessageHandler(hack_command_func, filters.command("hack", prefixes=".") & filters.user("me")))
